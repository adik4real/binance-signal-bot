import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
import aiohttp

TOKEN = '—Ç–≤–æ–π_–±–æ—Ç_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å'
CHAT_ID = —Ç–≤–æ–π_—á–∞—Ç_id_–∏–ª–∏_–≥—Ä—É–ø–ø–∞_–∫—É–¥–∞_–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å_—Å–∏–≥–Ω–∞–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, int)

# –ú–æ–Ω–µ—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
COINS = ['BTCUSDT', 'XRPUSDT', 'SOLUSDT', 'ADAUSDT', 'ETHUSDT', 'TONUSDT', 'BNBUSDT']

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
signals_sent = {coin: None for coin in COINS}

async def get_binance_data(symbol):
    url = f'https://api.binance.com/api/v3/ticker/24hr?symbol={symbol}'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                return await resp.json()
            else:
                return None

async def get_rsi(symbol, interval='1m', limit=14):
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ RSI
    url = f'https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()
                closes = [float(candle[4]) for candle in data]  # —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                return calculate_rsi(closes)
            else:
                return None

def calculate_rsi(prices):
    if len(prices) < 14:
        return None
    gains = []
    losses = []
    for i in range(1, len(prices)):
        delta = prices[i] - prices[i-1]
        if delta >= 0:
            gains.append(delta)
            losses.append(0)
        else:
            gains.append(0)
            losses.append(abs(delta))
    avg_gain = sum(gains) / 14
    avg_loss = sum(losses) / 14
    if avg_loss == 0:
        return 100
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return round(rsi, 2)

async def send_signal(app, symbol, rsi, price):
    global signals_sent
    chat_id = CHAT_ID
    message = ""
    if rsi < 30 and signals_sent[symbol] != 'long':
        message = f"üìà –°–∏–≥–Ω–∞–ª LONG –Ω–∞ {symbol}\nRSI: {rsi}\n–¶–µ–Ω–∞: {price} USDT"
        signals_sent[symbol] = 'long'
    elif rsi > 70 and signals_sent[symbol] != 'short':
        message = f"üìâ –°–∏–≥–Ω–∞–ª SHORT –Ω–∞ {symbol}\nRSI: {rsi}\n–¶–µ–Ω–∞: {price} USDT"
        signals_sent[symbol] = 'short'
    else:
        # –ï—Å–ª–∏ RSI –≤ –Ω–æ—Ä–º–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –ø–æ–∑–∂–µ
        if 30 <= rsi <= 70:
            signals_sent[symbol] = None
        return

    if message:
        await app.bot.send_message(chat_id=chat_id, text=message)

async def monitor_prices(app):
    while True:
        for coin in COINS:
            data = await get_binance_data(coin)
            if not data:
                continue
            price = float(data['lastPrice'])
            rsi = await get_rsi(coin)
            if rsi is None:
                continue
            await send_signal(app, coin, rsi, price)
        await asyncio.sleep(5)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(coin[:-4], callback_data=coin)] for coin in COINS
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É:', reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    symbol = query.data
    data = await get_binance_data(symbol)
    if not data:
        await query.edit_message_text(text="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        return

    price = data['lastPrice']
    volume = data['quoteVolume']
    rsi = await get_rsi(symbol)
    rsi_text = str(rsi) if rsi else "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    text = (
        f"{symbol[:-4]} –¥–∞–Ω–Ω—ã–µ:\n"
        f"–¶–µ–Ω–∞: {price} USDT\n"
        f"–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24—á: {volume} USDT\n"
        f"RSI (14): {rsi_text}"
    )
    await query.edit_message_text(text=text)

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CallbackQueryHandler(button))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(monitor_prices(app))

    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
