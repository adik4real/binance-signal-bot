import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CallbackQueryHandler, ContextTypes, CommandHandler
import aiohttp

TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨"

COINS = ["BTCUSDT", "XRPUSDT", "SOLUSDT", "ADAUSDT", "ETHUSDT", "TONUSDT", "BNBUSDT"]

async def fetch_binance_data(symbol):
    url = f"https://api.binance.com/api/v3/ticker/24hr?symbol={symbol}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                return await resp.json()
            else:
                return None

async def fetch_klines(symbol, interval='1h', limit=50):
    url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                return await resp.json()
            else:
                return None

def calculate_rsi(prices, period=14):
    gains = []
    losses = []
    for i in range(1, len(prices)):
        delta = prices[i] - prices[i-1]
        if delta > 0:
            gains.append(delta)
            losses.append(0)
        else:
            gains.append(0)
            losses.append(abs(delta))
    avg_gain = sum(gains[:period]) / period
    avg_loss = sum(losses[:period]) / period
    rsis = []
    if avg_loss == 0:
        return 100
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return round(rsi, 2)

def calculate_macd(prices, slow=26, fast=12, signal=9):
    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è MACD –Ω–∞ –æ—Å–Ω–æ–≤–µ EMA, —á—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å
    # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É ta-lib –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
    def ema(prices, period):
        emas = []
        k = 2 / (period + 1)
        emas.append(prices[0])  # start ema —Å –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        for price in prices[1:]:
            ema_val = price * k + emas[-1] * (1 - k)
            emas.append(ema_val)
        return emas

    ema_fast = ema(prices, fast)
    ema_slow = ema(prices, slow)
    macd_line = [f - s for f, s in zip(ema_fast[-len(ema_slow):], ema_slow)]
    signal_line = ema(macd_line, signal)
    macd_histogram = [m - s for m, s in zip(macd_line[-len(signal_line):], signal_line)]
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è MACD, signal –∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
    if len(macd_line) == 0 or len(signal_line) == 0:
        return (0, 0, 0)
    return round(macd_line[-1], 4), round(signal_line[-1], 4), round(macd_histogram[-1], 4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(coin[:-4], callback_data=coin)] for coin in COINS
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É:", reply_markup=reply_markup)

async def coin_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    symbol = query.data

    data = await fetch_binance_data(symbol)
    if not data:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        return

    klines = await fetch_klines(symbol)
    if not klines:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è RSI –∏ MACD
    closes = [float(kline[4]) for kline in klines]

    rsi = calculate_rsi(closes)
    macd_line, signal_line, macd_hist = calculate_macd(closes)

    price = float(data['lastPrice'])
    volume = float(data['quoteVolume'])
    price_change_percent = float(data['priceChangePercent'])

    # –°–∏–≥–Ω–∞–ª—ã RSI
    if rsi < 30:
        rsi_signal = "üìà RSI –Ω–∏–∑–∫–∏–π ‚Äî –≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ–∫—É–ø–∫–∞"
    elif rsi > 70:
        rsi_signal = "üìâ RSI –≤—ã—Å–æ–∫–∏–π ‚Äî –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞"
    else:
        rsi_signal = "RSI –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ"

    text = (
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ {symbol[:-4]}:\n"
        f"–¶–µ–Ω–∞: {price:.4f} USDT\n"
        f"–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24—á: {volume:.2f} USDT\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 24—á: {price_change_percent:.2f}%\n\n"
        f"RSI: {rsi} ‚Äî {rsi_signal}\n"
        f"MACD: {macd_line} (MACD –ª–∏–Ω–∏—è)\n"
        f"Signal: {signal_line}\n"
        f"Histogram: {macd_hist}\n\n"
        "–î–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –º–æ–Ω–µ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start"
    )
    await query.edit_message_text(text)

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(coin_info))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
